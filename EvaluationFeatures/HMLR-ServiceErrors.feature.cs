// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landmark.HmlrBg.SkeletonTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SanityCheck_HMLR_Verification_ServiceErrorHandlingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "HMLR-ServiceErrors.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SanityCheck-HMLR-Verification-ServiceErrorHandling", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SanityCheck-HMLR-Verification-ServiceErrorHandling")))
            {
                global::Landmark.HmlrBg.SkeletonTests.Features.SanityCheck_HMLR_Verification_ServiceErrorHandlingFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ErrorHandlingOnInvalidURL(string comment, string json, string serviceName, string version, string method, string aPIsubscription, string statusCode, string expectedResponse, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error Handling on Invalid URL", exampleTags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
    testRunner.Given(string.Format("I have Json File {0}", json), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
    testRunner.And("I post with request header Hmlr-Authorization with value Default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And(string.Format("I post to url https://lmkbvt.azure-api.net/BVT/{0}/{1}/{2}?subscription-key={3}", serviceName, version, method, aPIsubscription), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
    testRunner.When("I view the returned post response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
    testRunner.Then(string.Format("a HTTP {0} will be returned", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
    testRunner.And(string.Format("the returned response equal {0}", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling on Invalid URL: ServiceName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ServiceName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "ServiceName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "HMLR-Verification-OOV.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "hmlrbgtest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "v1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:APIsubscription", "Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "404")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{ \"statusCode\": 404, \"message\": \"Resource not found\" }")]
        public virtual void ErrorHandlingOnInvalidURL_ServiceName()
        {
#line 8
this.ErrorHandlingOnInvalidURL("ServiceName", "HMLR-Verification-OOV.json", "hmlrbgtest", "v1", "verification", "Replace", "404", "{ \"statusCode\": 404, \"message\": \"Resource not found\" }", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling on Invalid URL: Version-")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Version-")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Version-")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "HMLR-Verification-OOV.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "hmlrbg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "A1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:APIsubscription", "Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "404")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{ \"statusCode\": 404, \"message\": \"Resource not found\" }")]
        public virtual void ErrorHandlingOnInvalidURL_Version_()
        {
#line 8
this.ErrorHandlingOnInvalidURL("Version-", "HMLR-Verification-OOV.json", "hmlrbg", "A1", "verification", "Replace", "404", "{ \"statusCode\": 404, \"message\": \"Resource not found\" }", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling on Invalid URL: Subscription_key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Subscription_key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Subscription_key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "HMLR-Verification-OOV.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "hmlrbg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "v1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:APIsubscription", "102030405")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "401")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{ \"statusCode\": 401, \"message\": \"Access denied due to invalid subscription key. M" +
            "ake sure to provide a valid key for an active subscription.\" }")]
        public virtual void ErrorHandlingOnInvalidURL_Subscription_Key()
        {
#line 8
this.ErrorHandlingOnInvalidURL("Subscription_key", "HMLR-Verification-OOV.json", "hmlrbg", "v1", "verification", "102030405", "401", "{ \"statusCode\": 401, \"message\": \"Access denied due to invalid subscription key. M" +
                    "ake sure to provide a valid key for an active subscription.\" }", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling on Invalid URL: Method-Verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Method-Verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Method-Verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "HMLR-Verification-OOV.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "hmlrbg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "v1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "testverification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:APIsubscription", "Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "404")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{ \"statusCode\": 404, \"message\": \"Resource not found\" }")]
        public virtual void ErrorHandlingOnInvalidURL_Method_Verification()
        {
#line 8
this.ErrorHandlingOnInvalidURL("Method-Verification", "HMLR-Verification-OOV.json", "hmlrbg", "v1", "testverification", "Replace", "404", "{ \"statusCode\": 404, \"message\": \"Resource not found\" }", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling on Invalid URL: Method-Information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Method-Information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Method-Information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "HMLR-Information-RES.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "hmlrbg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "v1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "testinformation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:APIsubscription", "Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "404")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{ \"statusCode\": 404, \"message\": \"Resource not found\" }")]
        public virtual void ErrorHandlingOnInvalidURL_Method_Information()
        {
#line 8
this.ErrorHandlingOnInvalidURL("Method-Information", "HMLR-Information-RES.json", "hmlrbg", "v1", "testinformation", "Replace", "404", "{ \"statusCode\": 404, \"message\": \"Resource not found\" }", ((string[])(null)));
#line hidden
        }
        
        public virtual void ErrorHandlingForInvalidSubscriptionKey(string comment, string method, string json, string aPIsubscription, string statusCode, string expectedResponse, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error Handling for Invalid Subscription Key", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
    testRunner.Given(string.Format("I have Json File {0}", json), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And("I post with request header Hmlr-Authorization with value Default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
    testRunner.And(string.Format("I post to url https://lmkbvt.azure-api.net/BVT/hmlrbg/v1/{0}?subscription-key={1}" +
                        "", method, aPIsubscription), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
    testRunner.When("I view the returned post response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
    testRunner.Then(string.Format("a HTTP {0} will be returned", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
    testRunner.And(string.Format("the returned response equal {0}", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling for Invalid Subscription Key: Verification-OOV-Invalid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Verification-OOV-Invalid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Verification-OOV-Invalid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "HMLR-Verification-OOV.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:APIsubscription", "102030405")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "401")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{ \"statusCode\": 401, \"message\": \"Access denied due to invalid subscription key. M" +
            "ake sure to provide a valid key for an active subscription.\" }")]
        public virtual void ErrorHandlingForInvalidSubscriptionKey_Verification_OOV_Invalid()
        {
#line 25
this.ErrorHandlingForInvalidSubscriptionKey("Verification-OOV-Invalid", "verification", "HMLR-Verification-OOV.json", "102030405", "401", "{ \"statusCode\": 401, \"message\": \"Access denied due to invalid subscription key. M" +
                    "ake sure to provide a valid key for an active subscription.\" }", ((string[])(null)));
#line hidden
        }
        
        public virtual void ErrorHandlingJsonPostHandling(string comment, string json, string method, string statusCode, string expectedResponse, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error Handling Json Post Handling", exampleTags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
    testRunner.Given(string.Format("I have Json line {0}", json), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
    testRunner.And("I post with request header Hmlr-Authorization with value Default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And(string.Format("I post to url https://lmkbvt.azure-api.net/BVT/hmlrbg/v1/{0}?subscription-key=Rep" +
                        "lace", method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
    testRunner.When("I view the returned post response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
    testRunner.Then(string.Format("a HTTP {0} will be returned", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
    testRunner.And(string.Format("the returned response contains {0}", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling Json Post Handling: Verification-OOV-Empty Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Verification-OOV-Empty Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Verification-OOV-Empty Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"")]
        public virtual void ErrorHandlingJsonPostHandling_Verification_OOV_EmptyJson()
        {
#line 38
this.ErrorHandlingJsonPostHandling("Verification-OOV-Empty Json", "", "verification", "400", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling Json Post Handling: Verification-OOV-Invalid Json ClosingBracketOn" +
            "ly-should log to splunk no detail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Verification-OOV-Invalid Json ClosingBracketOnly-should log to splunk no detail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Verification-OOV-Invalid Json ClosingBracketOnly-should log to splunk no detail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "}")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "verification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"")]
        public virtual void ErrorHandlingJsonPostHandling_Verification_OOV_InvalidJsonClosingBracketOnly_ShouldLogToSplunkNoDetail()
        {
#line 38
this.ErrorHandlingJsonPostHandling("Verification-OOV-Invalid Json ClosingBracketOnly-should log to splunk no detail", "}", "verification", "400", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling Json Post Handling: Information-RES-Invalid Json OpenBracketOnly-s" +
            "hould log to splunk  no detail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Information-RES-Invalid Json OpenBracketOnly-should log to splunk  no detail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Information-RES-Invalid Json OpenBracketOnly-should log to splunk  no detail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "{")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"")]
        public virtual void ErrorHandlingJsonPostHandling_Information_RES_InvalidJsonOpenBracketOnly_ShouldLogToSplunkNoDetail()
        {
#line 38
this.ErrorHandlingJsonPostHandling("Information-RES-Invalid Json OpenBracketOnly-should log to splunk  no detail", "{", "information", "400", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void ErrorHandlingForInvalidJson_MissingBrackets(string comment, string json, string statusCode, string expectedResponse, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error Handling for Invalid Json-Missing Brackets", exampleTags);
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
    testRunner.Given(string.Format("I have Json File {0}", json), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("I post with request header Hmlr-Authorization with value Default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
    testRunner.And("I post to url https://lmkbvt.azure-api.net/BVT/hmlrbg/v1/verification?subscriptio" +
                    "n-key=Replace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
    testRunner.When("I view the returned post response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
    testRunner.Then(string.Format("a HTTP {0} will be returned", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
    testRunner.And(string.Format("the returned response contains {0}", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling for Invalid Json-Missing Brackets: Verification-OOV-Invalid-Json M" +
            "issing Bracket")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Verification-OOV-Invalid-Json Missing Bracket")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Verification-OOV-Invalid-Json Missing Bracket")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "Invalid-HMLR-Verification-OOV-MB.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"")]
        public virtual void ErrorHandlingForInvalidJson_MissingBrackets_Verification_OOV_Invalid_JsonMissingBracket()
        {
#line 53
this.ErrorHandlingForInvalidJson_MissingBrackets("Verification-OOV-Invalid-Json Missing Bracket", "Invalid-HMLR-Verification-OOV-MB.json", "400", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling for Invalid Json-Missing Brackets: Information-RES-Invalid-Json Mi" +
            "ssing Bracket")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Information-RES-Invalid-Json Missing Bracket")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Information-RES-Invalid-Json Missing Bracket")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "Invalid-HMLR-Information-RES-MB.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"")]
        public virtual void ErrorHandlingForInvalidJson_MissingBrackets_Information_RES_Invalid_JsonMissingBracket()
        {
#line 53
this.ErrorHandlingForInvalidJson_MissingBrackets("Information-RES-Invalid-Json Missing Bracket", "Invalid-HMLR-Information-RES-MB.json", "400", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void ErrorHandlingForInvalidJson_MissingComma(string comment, string json, string statusCode, string expectedResponse, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error Handling for Invalid Json-Missing Comma", exampleTags);
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
    testRunner.Given(string.Format("I have Json File {0}", json), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
 testRunner.And("I post with request header Hmlr-Authorization with value Default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
    testRunner.And("I post to url https://lmkbvt.azure-api.net/BVT/hmlrbg/v1/verification?subscriptio" +
                    "n-key=Replace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
    testRunner.When("I view the returned post response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
    testRunner.Then(string.Format("a HTTP {0} will be returned", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
    testRunner.And(string.Format("the returned response contains {0}", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling for Invalid Json-Missing Comma: Verification-OOV-Invalid-Json Miss" +
            "ingCommaInParameter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Verification-OOV-Invalid-Json MissingCommaInParameter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Verification-OOV-Invalid-Json MissingCommaInParameter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "Invalid-HMLR-Verification-OOV-MCinParmeter.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"")]
        public virtual void ErrorHandlingForInvalidJson_MissingComma_Verification_OOV_Invalid_JsonMissingCommaInParameter()
        {
#line 68
this.ErrorHandlingForInvalidJson_MissingComma("Verification-OOV-Invalid-Json MissingCommaInParameter", "Invalid-HMLR-Verification-OOV-MCinParmeter.json", "400", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error Handling for Invalid Json-Missing Comma: Information-RES-Invalid-Json Missi" +
            "ng Comma-should log to splunk")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SanityCheck-HMLR-Verification-ServiceErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Information-RES-Invalid-Json Missing Comma-should log to splunk")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Comment", "Information-RES-Invalid-Json Missing Comma-should log to splunk")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Json", "Invalid-HMLR-Information-RES-MC.json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StatusCode", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedResponse", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"")]
        public virtual void ErrorHandlingForInvalidJson_MissingComma_Information_RES_Invalid_JsonMissingComma_ShouldLogToSplunk()
        {
#line 68
this.ErrorHandlingForInvalidJson_MissingComma("Information-RES-Invalid-Json Missing Comma-should log to splunk", "Invalid-HMLR-Information-RES-MC.json", "400", "{\"message\":\"invalid request body given\",\"messageId\":\"\",\"requestId\":\"", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion

